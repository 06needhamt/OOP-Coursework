/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import java.io.*;
import javax.swing.*;
import Classes.*;
import javax.swing.event.*;
/**
 * This class manages the Form where users will add and remove players from a team
 * @author Tom
 */
public class AddRemovePlayerForm extends javax.swing.JFrame {

    /**
     * Default Constructor for AddAndRemovePlayerForm
     */
    private TeamManager manager;
    public AddRemovePlayerForm() {
        initComponents();
    }
    /**
     * Constructor for AddRemovePlayerForm which takes a TeamManager so teams can be read from a file
     * @param Manager The team manager that will manage the teams
     */
    public AddRemovePlayerForm(TeamManager Manager)
    {
        this.manager = Manager;
        initComponents(); // initialise the foem
        this.lstTeamName.addListSelectionListener(new ListSelectionListener()
                {
                    public void valueChanged(ListSelectionEvent Event)
                    {
                        JList Source = (JList) Event.getSource();
                        lstTeamNameItemSelected(Event); // when the user clicks on a team name desplay it's players
                    }
                });
        String[] Teams = ReadTeamsFile();  // Try to read team data from a file
        ReadPlayerFile(Teams); // Try to read player data from a file
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstTeamName = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstPlayerName = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPlayerName = new javax.swing.JTextField();
        btnRemovePlayer = new javax.swing.JButton();
        btnAddPlayer = new javax.swing.JButton();
        btnCloseForm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(lstTeamName);

        jLabel1.setText("Teams");

        jScrollPane2.setViewportView(lstPlayerName);

        jLabel2.setText("Players");

        jLabel3.setText("Player Name");

        btnRemovePlayer.setText("Remove Player");
        btnRemovePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePlayerActionPerformed(evt);
            }
        });

        btnAddPlayer.setText("Add Player");
        btnAddPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPlayerActionPerformed(evt);
            }
        });

        btnCloseForm.setText("Close Form");
        btnCloseForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseFormActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnAddPlayer)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addGap(29, 29, 29)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addComponent(btnRemovePlayer))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(btnCloseForm)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddPlayer)
                    .addComponent(btnRemovePlayer))
                .addGap(18, 18, 18)
                .addComponent(btnCloseForm)
                .addGap(162, 162, 162))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when the add player button is clicked so the player is added to a team
     * @param evt The event listener for the Add Player button
     */
    private void btnAddPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPlayerActionPerformed
        try
        {
            int index = 0;
            
            for (int i = 0; i < manager.GetTeams().size(); i++)
            {
              
                if(manager.GetTeams().get(i).getName().equals(this.lstTeamName.getSelectedValue().toString())) // find the selected team 
                {
                    index = i;
                    manager.GetTeams().get(i).AddPlayer(new Player(this.txtPlayerName.getText())); // add the player to the selected team
                    break; // break the loop
                }
            }
                if(this.txtPlayerName.getText().equals("")) // if no team was selected
                {
                    throw new Exception(); // Throw an exception
                }
                this.lstPlayerName.setListData(CreatePlayerList(this.lstTeamName.getSelectedValue().toString())); // Update the list of player names and add them to a list box
                this.txtPlayerName.setText(""); // Empty the player name input box so that a new player can be added
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, "Please Select A Team Name"); // If the user did not select a team name how a error message 
        }
    }//GEN-LAST:event_btnAddPlayerActionPerformed

    /**
     * This method is called when the remove player button is clicked so the player is removed from the team
     * @param evt The event listener for the remove Player button
     */
    private void btnRemovePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePlayerActionPerformed

            int index = 0;
            int TeamIndex = 0;
            for (int i = 0; i < manager.GetTeams().size(); i++)
            {
                 if(manager.GetTeams().get(i).getName().equals(this.lstTeamName.getSelectedValue().toString())) 
                {
                    TeamIndex = i;
                    manager.GetTeams().get(i).AddPlayer(new Player(this.txtPlayerName.getText()));
                    break;
                }
            }
            for (int i = 0; i < manager.GetTeams().size(); i++)
            {
                if(manager.GetTeams().get(TeamIndex).GetPlayers().get(i).GetName().equals(this.lstPlayerName.getSelectedValue().toString()))
                {
                    index = i;
                    manager.GetTeams().get(TeamIndex).RemovePlayerByIndex(index);
                    break;
                }
            }
                this.lstPlayerName.setListData(CreatePlayerList(this.lstTeamName.getSelectedValue().toString()));
                this.txtPlayerName.setText("");
    }//GEN-LAST:event_btnRemovePlayerActionPerformed

    /**
     * This method is called when the close form button is pressed so the form closes
     * @param evt The event listener for the close form button
     */
    private void btnCloseFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseFormActionPerformed
        
        try
        {
            String[] TeamList = CreateTeamList(); // create a list of teams
            //String[] PlayerList = CreatePlayerList();
            File f = new File("Players.txt"); // file location for the player data to be wrirren to 
            f.createNewFile();
            FileWriter fw = new FileWriter(f,false); // initialise the file writer object 
            BufferedWriter br = new BufferedWriter(fw); // initialise the buffered writer object for writing data to the file
            
            for(int i = 0; i < TeamList.length; i++) // Write each team to the file
            {
               br.write(TeamList[i] + ","); // write the teamname to the file followed by a comma
                ListModel model = this.lstPlayerName.getModel();
                String[] PlayerList = new String[model.getSize()];
                for(int j = 0; j < model.getSize(); j++)
                {
                    PlayerList[j] = model.getElementAt(j).toString();
                    br.write(PlayerList[j] + ",");
                }
                br.write('\n'); // write a line terminator to the file
               // manager.AddTeam(new Team(list[i]));
            }
            br.close(); // close the buffered writer
            //this.lstTeamName.setListData(new Object[] { null });
            //this.lstPlayerName.setListData(new Object[] { null });
            
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "An Error occured while writing the teams to a file"); // if an error occured display an error message
            ex.printStackTrace();
        }
        finally
        {
            // Close the form
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_btnCloseFormActionPerformed
    /**
     * This method crates a list of team names for displaying in the list box
     * @return An Array of team names to be displayed in the list box
     */
    private String[] CreateTeamList()
    {
        String[] names = new String[manager.GetTeams().size()];
        for(int i = 0; i < manager.GetTeams().size(); i++) // iterate through the list of teams
        {
            names[i] = manager.GetTeams().get(i).getName(); // add the name of each tema in the list to an array
        }
        return names; // return the array
    } 
       /**
        * This method creates a list of players for a team
        * @param TeamName The name of the team to generate a list of it's players
        * @return An array of player names to be displayed in the list box
        */
    private String[] CreatePlayerList(String TeamName)
    {
        Team T;
        //int count = 0;
        String[] names = null;
        for (int index = 0; index < manager.GetTeams().size(); index++)
        {
            if(manager.GetTeams().get(index).getName().equals(TeamName))
            {
                
                names = new String[manager.GetTeams().get(index).GetPlayers().size()];
                for(int j = 0; j < manager.GetTeams().get(index).GetPlayers().size(); j++)
                {
                    names[j] = manager.GetTeams().get(index).GetPlayers().get(j).GetName();
                }
                break;
            }
            
            if(manager.GetTeams().get(index).GetPlayers().isEmpty())
            {
                return new String[] {""};
            } 
        }
        return names;
    }
    // ************************************************************************************************************
    /**
     * This Method reads all of the team names from a file
     * @return The list of team names read from the file
     */
    private String[] ReadTeamsFile()
    {
        try
        {
            String ReadTeams;
            String[] Teams;
            File f = new File("Teams.txt");
            if(f.length() == 0)
            {
                return null;
            }
            FileReader fr = new FileReader(f);
            BufferedReader br = new BufferedReader(fr);
            ReadTeams = br.readLine();
            Teams = ReadTeams.split(",[ ]*");
             for(int i = 0; i < Teams.length; i++)
            {
                manager.AddTeam(new Team(Teams[i]));
            }
            this.lstTeamName.setListData(Teams);
            br.close();
            return Teams;
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "There Was an error while reading the team data file");
        }
        return null;
    }
    /**
     * This method returns a list of player names from the file
     * @param Teams An array of teams to read players for
     */
    private void ReadPlayerFile(String[] Teams)
    {
        try
        {
            String ReadPlayers;
            String[] Players = null;
            File f = new File("Players.txt");
            if(f.length() == 0)
            {
                return;
            }
            FileReader fr = new FileReader(f);
            BufferedReader br = new BufferedReader(fr);
            while((ReadPlayers = br.readLine()) != null)
            {
                Players = ReadPlayers.split(",[ ]*");
                for(int index = 0; index < Teams.length; index++)
                {
                    //manager.GetTeams().get(index).GetPlayers().clear();
                    if(manager.GetTeams().get(index).getName().equals(Players[0]))
                    {
                        for(int j = 1; j < Players.length; j++)
                        {
                            manager.GetTeams().get(index).AddPlayer(new Player(Players[j]));
                        }
                    }
                }   
            }
            //this.lstPlayerName.setListData(Players);
            br.close();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "There Was an error while reading the team data file");
        }
    }
    /**
     * This method is called when a user clicks a team name in the teams list box
     * @param Event The Event Listener for the list box
     */
    private void lstTeamNameItemSelected(ListSelectionEvent Event) {
        if(this.lstTeamName.getSelectedValue() == null)
        {
            return;
        }
        String Selected = this.lstTeamName.getSelectedValue().toString();
        this.lstPlayerName.setListData(CreatePlayerList(Selected));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPlayer;
    private javax.swing.JButton btnCloseForm;
    private javax.swing.JButton btnRemovePlayer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstPlayerName;
    private javax.swing.JList lstTeamName;
    private javax.swing.JTextField txtPlayerName;
    // End of variables declaration//GEN-END:variables

}
