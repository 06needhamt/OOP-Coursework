/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import Classes.*;
import java.io.*;
import javax.swing.*;
/**
 *
 * @author Tom
 */
public class CreateMatchForm extends javax.swing.JFrame {

    /**
     * Creates new form CreateMatchForm
     */
    private TeamManager manager;
    public CreateMatchForm() {
        initComponents();
    }
    public CreateMatchForm(TeamManager Manager)
    {
        this.manager = Manager;
        initComponents();
        try
        {
            String ReadTeams;
            String[] Teams;
            File f = new File("Teams.txt");
            FileReader fr = new FileReader(f);
            BufferedReader br = new BufferedReader(fr);
            ReadTeams = br.readLine();
            Teams = ReadTeams.split(",[ ]*");
            for(int i = 0; i < Teams.length; i++)
            {
                manager.AddTeam(new Team(Teams[i]));
            }
            this.lstHomeTeam.setListData(Teams);
            this.lstAwayTeam.setListData(Teams);
            br.close();
            
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, "An Error occured while reading the teams from a file");
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstHomeTeam = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstAwayTeam = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtHomeScore = new javax.swing.JTextField();
        txtAwayScore = new javax.swing.JTextField();
        btnSaveScore = new javax.swing.JButton();
        btnCloseForm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Home Team");

        jLabel2.setText("Away Team");

        jScrollPane1.setViewportView(lstHomeTeam);

        jScrollPane2.setViewportView(lstAwayTeam);

        jLabel3.setText("Home Score");

        jLabel4.setText("Away Score");

        txtHomeScore.setToolTipText("");

        txtAwayScore.setToolTipText("");

        btnSaveScore.setText("Save Score");
        btnSaveScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveScoreActionPerformed(evt);
            }
        });

        btnCloseForm.setText("Close Form");
        btnCloseForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseFormActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(93, 93, 93))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtHomeScore, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnCloseForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSaveScore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAwayScore, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(txtHomeScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAwayScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(btnSaveScore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCloseForm)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveScoreActionPerformed
        Match M = CreateMatch();
        CalculateWinner(M);
        WriteScoresToFile();
    }//GEN-LAST:event_btnSaveScoreActionPerformed

    private void btnCloseFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseFormActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnCloseFormActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCloseForm;
    private javax.swing.JButton btnSaveScore;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstAwayTeam;
    private javax.swing.JList lstHomeTeam;
    private javax.swing.JTextField txtAwayScore;
    private javax.swing.JTextField txtHomeScore;
    // End of variables declaration//GEN-END:variables

    private Match CreateMatch() {
        try
        {
            if(this.lstHomeTeam.getSelectedValue() == null || this.lstAwayTeam.getSelectedValue() == null)
            {
                JOptionPane.showMessageDialog(this, "Please select a home team and an away team");
                return null;
            }
            else if(this.lstHomeTeam.getSelectedValue().toString().equals(this.lstAwayTeam.getSelectedValue().toString()))
            {
                JOptionPane.showMessageDialog(this, "Home and Away teams can not be the same");
                return null;
            }
            String Team1 = this.lstHomeTeam.getSelectedValue().toString();
            String Team2 = this.lstAwayTeam.getSelectedValue().toString();
            int Team1Score = Integer.parseInt(this.txtHomeScore.getText());
            int Team2Score = Integer.parseInt(this.txtAwayScore.getText());
            Match M = new Match(Team1, Team2, Team1Score, Team2Score);
            WriteMatchToFile(M);
            return M;
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, "There was an error while creating the match");
            ex.printStackTrace();
        }
        return null;
    }

    private void WriteMatchToFile(Match M) {
       try
       {
            File f = new File("Matches.txt");
            FileWriter fw = new FileWriter(f, true);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(M.GetTeam1() + ",");
            bw.write(String.valueOf(M.GetTeam1Score()) + ",");
            bw.write(M.GetTeam2() + ",");
            bw.write(String.valueOf(M.GetTeam2Score()));
            bw.write("\n");
            bw.close();
       }
       catch(Exception ex)
       {
           JOptionPane.showMessageDialog(this,"There was an error while writing the match data to the file");
           ex.printStackTrace();
       }
       
    }

    private void CalculateWinner(Match M) {
        String winner = M.CalculateWinner();
        if(winner.equals("Draw"))
        {
            for (int i = 0; i < manager.GetTeams().size(); i++)
            {
                if(manager.GetTeams().get(i).getName().equals(M.GetTeam1()) || manager.GetTeams().get(i).getName().equals(M.GetTeam2()))
                {
                    manager.GetTeams().get(i).IncrementDraw();
                }
            }
        }
        else
        {
            for (int i = 0; i < manager.GetTeams().size(); i++)
            {
                if(manager.GetTeams().get(i).getName().equals(M.GetTeam1()) || manager.GetTeams().get(i).getName().equals(M.GetTeam2()))
                {
                    if(manager.GetTeams().get(i).getName().equals(winner))
                    {
                        manager.GetTeams().get(i).IncrenentWin();
                    }
                    else
                    {
                        manager.GetTeams().get(i).IncrementLoss();
                    }
                }
            }
        }
    }

    private void WriteScoresToFile() {
        try
        {
            File f = new File("Scores.txt");
            FileWriter fw = new FileWriter(f,false);
            BufferedWriter bw = new BufferedWriter(fw);
            for(int i = 0; i < manager.GetTeams().size(); i++)
            {
                manager.GetTeams().get(i).CalculateScore();
                bw.write(manager.GetTeams().get(i).getName() + ",");
                bw.write(manager.GetTeams().get(i).getWins() + ",");
                bw.write(manager.GetTeams().get(i).GetDraws() + ",");
                bw.write(manager.GetTeams().get(i).GetLosses() + ",");
                bw.write(manager.GetTeams().get(i).GetScore() + ",");
                bw.write("\n");
            }
            bw.close();
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "There was an error while writing the scores to the file");
            ex.printStackTrace();
        }
        
    }
}
